#########
# Author:        rmp
# Maintainer:    $Author: mw6 $
# Created:       2006-09-13
# Last Modified: $Date: 2009-08-07 13:49:02 $
# Id:            $Id: DBStore.pm,v 1.21 2009-08-07 13:49:02 mw6 Exp $
# Source:        $Source: /repos/cvs/webcore/SHARED_docs/lib/core/Website/DBStore.pm,v $
# $HeadURL$
#
# A database-backed file store, designed to be equivalent to a shared, cluster filesystem
#
package Website::DBStore;
use strict;
use warnings;
use Website::Utilities::IdGenerator;
use DBI;
use English qw(-no_match_vars);
use Carp;

our $VERSION = do { my @r = (q$Revision: 1.21 $ =~ /\d+/mxg); sprintf '%d.'.'%03d' x $#r, @r };
our $DEBUG   = 0;

sub dbhost { return 'web-vm-db-core02'; }
sub dbport { return 3315;       }
sub dbuser { return 'dbstore';  }
sub dbpass { return 'dbstore';  }
sub dbname { return 'dbstore';  }

sub new {
  my ($class, $ref) = @_;
  $ref            ||= {};
  $ref->{'idgen'}   = Website::Utilities::IdGenerator->new();

  bless $ref, $class;
  return $ref;
}

sub get {
  my ($self, $id) = @_;

#  $self->cleanup();

  $id =~ s|^/||mx; # strip leading slashes
  my $dbh   = $self->dbh();
  if(!$dbh) {
    return;
  }

  my $query = q(SELECT data FROM dbstore_permanent WHERE id = ?);
  my $data  = undef;
  eval {
    my $ref = $dbh->selectall_arrayref($query, {}, $id);
    $data   = $ref->[0]->[0];
  };
  $EVAL_ERROR and carp $EVAL_ERROR;

  if($data) {
    return $data||q();
  }

  $query = q(SELECT data FROM dbstore WHERE id = ?);
  $data  = undef;
  eval {
    my $ref = $dbh->selectall_arrayref($query, {}, $id);
    $data   = $ref->[0]->[0];
  };
  $EVAL_ERROR and carp $EVAL_ERROR;

  return $data||q();
}

sub set { ## no critic
  my ($self, $data, $id, $hours, $permanent) = @_;

  my $dbh = $self->dbh();
  if(!$dbh) {
    return;
  }

  $hours     ||= 1;

  if($hours < 1) {     # min 1 hour
    $hours     = 1;
  }

  if($hours > 14*24) {
    $hours     = 14*24; # max 2 weeks
  }

  if(uc $permanent eq 'N') {
    $permanent = 0;
  }

  if(!$id) {
    $id = $self->{'idgen'}->get_unique_id();
  }

  $id =~ s|^/||mx; # strip leading slashes

  $self->cleanup();

  my $table = $permanent?'dbstore_permanent':'dbstore';
  my $query = qq(REPLACE INTO $table (id,data,valid_until)
                 VALUES(?,?, DATE_ADD(NOW(), INTERVAL ? HOUR)));
  eval {
    $dbh->do($query, {}, $id, $data, $hours);
  };

  if($EVAL_ERROR) {
    carp $EVAL_ERROR;
    eval {
      $dbh->rollback();
    };
    return;

  } else {
    $dbh->commit();
  }

  return $id;
}

sub refresh {
  my ($self, $id, $hours ) = @_;

  my $dbh = $self->dbh();
  if(!$dbh) {
    return;
  }

  $hours     ||= 1;
  if($hours < 1) {      # min 1 hour
    $hours     = 1;
  }
  if($hours > 14*24) {
    $hours     = 14*24; # max 2 weeks
  }

  if(!$id) {
    $id = $self->{'idgen'}->get_unique_id();
  }

  $id =~ s|^/||mx; # strip leading slashes

  $self->cleanup();

  my $table = 'dbstore';
  my $query = qq[update $table
                    set valid_until = DATE_ADD(NOW(), INTERVAL ? HOUR)
                  where id = ?];

  eval {
    $dbh->do($query, {}, $hours, $id );
  };

  if($EVAL_ERROR) {
    carp $EVAL_ERROR;
    eval {
      $dbh->rollback();
    };
    return;

  } else {
    $dbh->commit();
  }

  return $id;
}

sub cleanup {
  my $self = shift;
  my $rows = 0;
  my $dbh  = $self->dbh();

  if(!$dbh) {
    return;
  }

  $SIG{ALRM} = sub { croak 'timeout'; };
  alarm 2;
  eval {
    $rows = $dbh->do(q(UPDATE sem SET sem=DATE_ADD(NOW(), INTERVAL 1 HOUR) WHERE sem < NOW()));
  };
  alarm 0;

  if($EVAL_ERROR) {
    carp $EVAL_ERROR;
    $dbh->rollback();
    return;
  }

  $dbh->commit();

  if($rows == 0) {
    #########
    # didn't manage to change the semaphore
    #
    return;
  }

  $rows = 0;
    my $s = time;
  $SIG{ALRM} = sub { croak 'timeout'; };
  alarm 10;
  eval {
    #########
    # What we want to do is delete where id in (select a series of ids)
    # but that's unavailable in this MySQL version so we need to do it by hand.
    # MySQL also doesn't like deleting from the same table we're selecting from.
    # Also limit our deletes to a handful of entries at a time and hope we don't have net growth
    #
    my $ids = $dbh->selectall_arrayref(q(SELECT id FROM dbstore WHERE valid_until < now() LIMIT 250));
    if(scalar @{$ids}) {
      $rows = $dbh->do(qq(DELETE FROM dbstore WHERE id IN (@{[join q(,), map { $dbh->quote($_->[0]) } @{$ids}]})));
    }
  };
  alarm 0;

  if($EVAL_ERROR) {
    carp $EVAL_ERROR;
    $self->dbh->rollback();
  } else {
    $self->dbh->commit();
  }
  $DEBUG and print {*STDERR} qq(Cleaned @{[$rows+0]} row(s) in @{[time-$s]} secs\n);
  return;
}

sub clear {
  my ($self, $id) = @_;
  $id or return;

  my $dbh = $self->dbh();
  if(!$dbh) {
    return;
  }

  eval {
    $dbh->do(q(DELETE FROM dbstore WHERE id=?), {}, $id);
  };

  if($EVAL_ERROR) {
    carp $EVAL_ERROR;
    $dbh->rollback();
  } else {
    $dbh->commit();
  }

  return;
}

sub dbh {
  my $self = shift;

  if(!$self->{'dbh'} || !$self->{'dbh'}->ping()) {
    my $dsn = sprintf q(DBI:mysql:database=%s;host=%s;port=%s),
                      $self->dbname(),
		      $self->dbhost(),
		      $self->dbport();
    eval {
      $self->{'dbh'} = DBI->connect_cached($dsn,
					   $self->dbuser(),
					   $self->dbpass(),
					   {
					    RaiseError => 1,
					    AutoCommit => 0,
					   });
    };
    if($EVAL_ERROR) {
      carp $EVAL_ERROR;
    }
  }
  return $self->{'dbh'};
}

1;
__END__

=head1 NAME

Website::DBStore - An API to a database-backed shared storage area avoiding cluster filesystems

=head1 VERSION

$Revision: 1.21 $

=head1 DESCRIPTION

=head1 SYNOPSIS

 use strict;
 use warnings;
 use SangerPaths qw(core);
 use Website::DBStore;
 use GD;
 use File::Type;

 my $oGD      = GD::Image->new(500,500);
 #########
 # Do some work on $gd
 #########
 my $sImage   = $oGD->png();
 my $oDBStore = Website::DBStore->new();
 my $sId      = $oDBStore->set($sImage, undef, 4); # undef = assign a new id; 4 = 4-hour lifetime


 #########
 # ... then later...
 #
 my $sImage = $oDBStore->get($sId);
 print 'Content-type: ', File::Type->checktype_contents($sImage), "\n\n", $sImage;

=head1 SUBROUTINES/METHODS

=head2 dbhost : Database hostname (not required)

  Arguments: None
  Returns:   Scalar database hostname

=head2 dbport : Database port (not required)

  Arguments: None
  Returns:   Scalar database port

=head2 dbuser : Database user (not required)

  Arguments: None
  Returns:   Scalar database username

=head2 dbpass : Database password (not required)

  Arguments: None
  Returns:   Scalar database password

=head2 dbname : Database name (not required)

  Arguments: None
  Returns:   Scalar database name

=head2 new : Constructor

 Arguments: None
 Returns:   Object Website::DBStore

=head2 get : Fetch data by id

  Arguments:   Scalar Identifier
  Returns:     Scalar blob from database
  Side Effect: Cleans up data past its expiry time

  my $sBlob = $oDBStore->get($sId);

=head2 set : Store data by id & optional expiry time

  Arguments:   Scalar data blob, Optional Scalar identifier, Optional Scalar hours validity
  Returns:     Scalar id on success or undef on failure
  Side Effect: Cleans up data past its expiry time

  #########
  # Save the blob with default expiry and return its assigned id
  #
  my $sId = $oDBStore->set($sBlob);

  #########
  # Save the blob with a given id and the default expiry
  #
  $oDBStore->set($sBlob, $sId);

  #########
  # Save the blob with a given id for a given expiry in hours)
  #
  $oDBStore->set($sBlob, $sId, 2);

  #########
  # Save the blob with a given id permanently
  #
  $oDBStore->set($sBlob, $sId, undef, 1);

=head2 cleanup : Delete data past expiry time

  Arguments: None
  Returns:   None

=head2 clear : Remove a given key

=head2 dbh : Database handle

  Arguments: None
  Returns:   Object DBI handle

=head1 DIAGNOSTICS

  $Website::DBStore::DEBUG = 1;

=head1 CONFIGURATION AND ENVIRONMENT

None

=head1 DEPENDENCIES

DBI and Website::Utilities::IdGenerator

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

=head1 AUTHOR

 Roger Pettett <rmp@sanger.ac.uk>

=head1 LICENSE AND COPYRIGHT

=cut
